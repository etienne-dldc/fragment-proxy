{"version":3,"sources":["node_modules/is-plain-obj/index.js","src/lib/proxify.ts","src/lib/index.ts","src/state.ts","src/index.ts"],"names":["toString","Object","prototype","module","exports","x","call","getPrototypeOf"],"mappings":"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","file":"src.f10117fe.map","sourceRoot":"..","sourcesContent":["'use strict';\nvar toString = Object.prototype.toString;\n\nmodule.exports = function (x) {\n\tvar prototype;\n\treturn toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));\n};\n","import isPlainObj from 'is-plain-obj';\n\nexport const IS_PROXY = Symbol('IS_PROXY');\nexport const IS_TRACKED = Symbol('IS_TRACKED');\nexport const PATHS = Symbol('PATHS');\nexport const VALUE = Symbol('VALUE');\n\nexport const KEYS = Symbol('KEYS');\n\nexport type Path = Array<string | number | symbol>;\n\nconst arrayMutations = new Set(['push', 'shift', 'pop', 'unshift', 'splice', 'reverse', 'sort', 'copyWithin']);\n\nfunction createArrayProxy<T extends Array<any>>(\n  value: T,\n  onLeafAccess: (path: Path) => void,\n  path: Path,\n  paths: Array<Path>\n): T {\n  return new Proxy(value, {\n    get(target, prop) {\n      if (prop === IS_PROXY) return true;\n      if (prop === PATHS) return [...paths, path];\n      if (prop === VALUE) return value;\n\n      if (prop === 'length') {\n        onLeafAccess([...path, KEYS]);\n        // createTracked(target[prop], [...paths, [...path, KEYS]]);\n        return target.length;\n      }\n\n      if (typeof prop === 'symbol') {\n        throw new Error(`Not allowed`);\n      }\n\n      if (typeof target[prop] === 'function') {\n        if (arrayMutations.has(String(prop))) {\n          throw new Error(`Not allowed`);\n        }\n        if (prop === 'find') {\n          return (...args: any) => {\n            onLeafAccess([...path, 'find']);\n            const result = (target[prop] as any)(...args);\n            if (result) {\n              const index = target.indexOf(result);\n              if (index === -1) {\n                throw new Error('Whaat ??');\n              }\n              return proxify(result, onLeafAccess, [...path, index], paths);\n            }\n            return undefined;\n          };\n        }\n        throw new Error(`Not supported methof ${prop}`);\n      }\n\n      const nestedPath = [...path, prop];\n\n      return proxify(target[prop], onLeafAccess, nestedPath);\n    },\n    set(target, prop, value) {\n      throw new Error(`Not allowed`);\n    },\n  });\n}\n\nfunction createObjectProxy<T extends object>(\n  value: T,\n  onLeafAccess: (path: Path) => void,\n  path: Path,\n  paths: Array<Path>\n): T {\n  return new Proxy(value, {\n    get(target, prop) {\n      if (prop === IS_PROXY) return true;\n      if (prop === PATHS) return [...paths, path];\n      if (prop === VALUE) return value;\n\n      if (typeof prop === 'symbol') {\n        throw new Error(`Not allowed`);\n      }\n\n      if (prop in Object.prototype) {\n        throw new Error(`Not allowed`);\n      }\n\n      const descriptor = Object.getOwnPropertyDescriptor(target, prop);\n\n      if (descriptor && 'get' in descriptor) {\n        throw new Error(`getter are not supportted`);\n      }\n\n      const targetValue = target[prop];\n      const nestedPath = [...path, prop];\n\n      if (typeof targetValue === 'function') {\n        throw new Error(`function are not supportted`);\n      }\n\n      return proxify(targetValue, onLeafAccess, nestedPath, paths);\n    },\n    set(target, prop, value) {\n      throw new Error(`Not allowed`);\n    },\n    deleteProperty(target, prop) {\n      throw new Error(`Not allowed`);\n    },\n  });\n}\n\nfunction pathEqual(left: Path, right: Path): boolean {\n  if (left.length !== right.length) return false;\n  return left.every((v, i) => v === right[i]);\n}\n\nexport type Tracked = {\n  paths: Array<Path>;\n  value: any;\n};\n\nfunction isTracked(value: any): boolean {\n  return value && (value[IS_PROXY] || value[IS_TRACKED]);\n}\n\nfunction getTrackedValue(value: any): any {\n  if (!isTracked(value)) {\n    throw new Error(`Not a tracked`);\n  }\n  return value[VALUE];\n}\n\nexport function resolveTracked(value: any): Tracked {\n  if (isTracked(value)) {\n    return {\n      paths: value[PATHS],\n      value: value[VALUE],\n    };\n  }\n  if (isPlainObj(value)) {\n    const paths: Array<Path> = [];\n    const resValue = {};\n    Object.keys(value).forEach(key => {\n      const res = resolveTracked(value[key]);\n      paths.push(...res.paths);\n      resValue[key] = res.value;\n    });\n    return {\n      paths,\n      value: resValue,\n    };\n  }\n  if (Array.isArray(value)) {\n    const paths: Array<Path> = [];\n    const resValue = value.map(val => {\n      const res = resolveTracked(val);\n      paths.push(...res.paths);\n      return res.value;\n    });\n    return {\n      paths,\n      value: resValue,\n    };\n  }\n  throw new Error(`Unsuported ${typeof value}`);\n}\n\nexport function proxify<T>(value: T, onLeafAccess: (path: Path) => void, path: Path = [], paths: Array<Path> = []): T {\n  if (value) {\n    if (value[IS_PROXY]) {\n      if (pathEqual(value[PATHS], path)) {\n        // already proxy but not same path => new proxy with correct path\n        return proxify(value[VALUE], onLeafAccess, path, paths);\n      }\n      return value;\n    } else if (isPlainObj(value)) {\n      return createObjectProxy(value as any, onLeafAccess, path, paths);\n    } else if (Array.isArray(value)) {\n      return createArrayProxy(value, onLeafAccess, path, paths);\n    }\n  }\n  onLeafAccess(path);\n  return value;\n}\n","import { proxify, Path, createTracked, resolveTracked, Tracked } from './proxify';\n\ntype FragmentOutput<Input, Output> = [Input] extends [void] ? () => Output : (input: Input) => Output;\n\nfunction stringifyPath(path: Path): string {\n  return path.map(v => String(v)).join('.');\n}\n\nexport function createFragmentFactory<State extends object>(state: State) {\n  function fragment<Output, Input = void>(\n    name: string,\n    select: (state: State, input: Input) => Output\n  ): FragmentOutput<Input, Output>;\n  function fragment<Selection, Output, Input = void>(\n    name: string,\n    select: (state: State, input: Input) => Selection,\n    transform: (selection: Selection) => Output\n  ): FragmentOutput<Input, Output>;\n\n  function fragment<Selection, Output, Input = void>(\n    name: string,\n    select: (state: State, input: Input) => Selection\n  ): FragmentOutput<Input, Output> {\n    return ((input: any) => {\n      let currentFragment: Array<Path> = [];\n      const proxyState = proxify(state, path => {\n        currentFragment.push(path);\n      });\n      console.log(`[FRAG] ${name} start`);\n      const result = select(proxyState, input);\n      const tracked = resolveTracked(result);\n      const output = tracked.value;\n      console.log({ tracked: tracked.paths, currentFragment });\n\n      console.log(`[FRAG] ${name} end`);\n      return output;\n    }) as any;\n  }\n\n  return fragment;\n}\n\ntype Select<I, O, P> = (input: Trackable<I>, props: P) => O;\n\ntype Trackable<Value> = {\n  value: Value;\n  track: Value;\n};\n\nfunction createTrackable<V>(value: V, basePath: string | null, paths: Array<Path>): Trackable<V> {\n  const initPath = basePath ? [basePath] : [];\n  return {\n    value,\n    track: proxify(value, initPath, paths),\n  };\n}\n\nexport function createTrackFactory<State extends object>(state: State) {\n  const proxyState = proxify(state);\n\n  /*\n    var range = num => Array(num).fill(null).map((v, i) => i + 1);\n    var types = range(5).map(i => [\n      `  // prettier-ignore\\n`,\n      `  function track<${range(i).map(j => `O${j}`).join(', ')}, Props = void>`,\n      `(name: string, ${range(i).map(j => `select${j}: Select<${j === 1 ? 'State' : `O${j-1}`}, O${j}, Props>`).join(', ')}): `,\n      `FragmentOutput<Props, O${i}>;`\n    ].join('')).join('\\n');\n    copy(types);\n    console.log(types);\n  */\n\n  // prettier-ignore\n  function track<O1, Props = void>(name: string, select1: Select<State, O1, Props>): FragmentOutput<Props, O1>;\n  // prettier-ignore\n  function track<O1, O2, Props = void>(name: string, select1: Select<State, O1, Props>, select2: Select<O1, O2, Props>): FragmentOutput<Props, O2>;\n  // prettier-ignore\n  function track<O1, O2, O3, Props = void>(name: string, select1: Select<State, O1, Props>, select2: Select<O1, O2, Props>, select3: Select<O2, O3, Props>): FragmentOutput<Props, O3>;\n  // prettier-ignore\n  function track<O1, O2, O3, O4, Props = void>(name: string, select1: Select<State, O1, Props>, select2: Select<O1, O2, Props>, select3: Select<O2, O3, Props>, select4: Select<O3, O4, Props>): FragmentOutput<Props, O4>;\n  // prettier-ignore\n  function track<O1, O2, O3, O4, O5, Props = void>(name: string, select1: Select<State, O1, Props>, select2: Select<O1, O2, Props>, select3: Select<O2, O3, Props>, select4: Select<O3, O4, Props>, select5: Select<O4, O5, Props>): FragmentOutput<Props, O5>;\n\n  function track<Output, Props = void>(name: string, ...selects: Array<(prev: any, props: Props) => any>): Output {\n    return ((input: any) => {\n      console.log(`[FRAG] ${name} start`);\n      const result = selects.reduce<null | Tracked>((acc, select, index) => {\n        if (index === 0) {\n          return resolveTracked(select(createTrackable(proxyState, null, []), input));\n        }\n        const res = resolveTracked(select(createTrackable(acc.value, String(index), acc.paths), input));\n        return res;\n      }, null);\n      console.log(`[FRAG] ${name} result`, result);\n      const output = result.value;\n      console.log(`[FRAG] ${name} end`);\n      return createTracked(output, result.paths);\n    }) as any;\n  }\n\n  return track;\n}\n\nexport type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\n\nexport type MergeInOut<In, Out> = [In, Out] extends [object, object] ? Omit<In, keyof Out> & Out : Out;\n\n// prettier-ignore\nexport function connect<Props>(name: string, props: Props): Props;\n// prettier-ignore\nexport function connect<Props, Output extends object>(name: string, props: Props, fragment: () => Output): MergeInOut<Props, Output>;\n// prettier-ignore\nexport function connect<Props, Input, Output extends object>(name: string, props: Props, fragment: (input: Input) => Output, input: Input): MergeInOut<Props, Output>;\n\nexport function connect(name: string, props: any, fragment?: any, input?: any): any {\n  console.log(`[CONNECT] ${name} start`);\n  let result = {};\n  if (fragment) {\n    const tracked = resolveTracked(fragment(input));\n    tracked.paths.forEach(path => {\n      console.log(`[CONNECT] ${name} track ${stringifyPath(path)}`);\n    });\n    result = tracked.value;\n  }\n  console.log(`[CONNECT] ${name} end`);\n  return { ...props, ...result };\n}\n","export type Post = { id: string; title: string; comments: Array<string> };\n\nexport type PostComment = {\n  id: string;\n  content: string;\n};\n\nexport type State = {\n  posts: Array<Post>;\n  comments: Array<PostComment>;\n  grid: Array<Array<number>>;\n  obj: {\n    demo: number;\n    str: string;\n  };\n  selectedCommentId: string;\n  selectedPostId: string;\n};\n\nconst comments: Array<PostComment> = [\n  {\n    id: '1',\n    content: 'Comment 1',\n  },\n  {\n    id: '2',\n    content: 'Comment 2',\n  },\n  {\n    id: '3',\n    content: 'Comment 3',\n  },\n  {\n    id: '4',\n    content: 'Comment 4',\n  },\n  {\n    id: '5',\n    content: 'Comment 5',\n  },\n  {\n    id: '6',\n    content: 'Comment 6',\n  },\n  {\n    id: '7',\n    content: 'Comment 7',\n  },\n];\n\nconst getRandomComments = () =>\n  comments\n    .map(c => ({ ...c, sort: Math.random() }))\n    .sort((l, r) => l.sort - r.sort)\n    .filter(p => Math.random() > 0.5)\n    .map(p => p.id);\n\nconst posts: Array<Post> = [\n  {\n    id: '1',\n    title: 'Post 1',\n    comments: getRandomComments(),\n  },\n  {\n    id: '2',\n    title: 'Post 2',\n    comments: getRandomComments(),\n  },\n  {\n    id: '3',\n    title: 'Post 3',\n    comments: getRandomComments(),\n  },\n  {\n    id: '4',\n    title: 'Post 4',\n    comments: getRandomComments(),\n  },\n];\n\nexport const state: State = {\n  posts,\n  comments,\n  selectedCommentId: '3',\n  selectedPostId: '2',\n  grid: [[0, 1, 3], [0, 1, 3], [0, 1, 3]],\n  obj: {\n    demo: 42,\n    str: 'hello',\n  },\n};\n","import { createFragmentFactory, createTrackFactory, connect } from './lib';\nimport { Post, PostComment, State, state } from './state';\nimport { PATHS } from './lib/proxify';\n\nconst fragment = createFragmentFactory<State>(state);\nconst track = createTrackFactory<State>(state);\n\nconsole.log(state);\n\nconst postsFrag = fragment('postsFrag', state => state.posts);\nconst postsLengthFrag = fragment('postsLengthFrag', state => state.posts.length, length => length + 5);\n\nconst result = connect(\n  'result',\n  {},\n  () => ({ posts: postsFrag(), postLength: postsLengthFrag() })\n);\n\nconsole.log(result);\n\nconst firstPostsFrag = fragment('postsFrag', state => state.posts[0]);\n\nconst commentFrag = fragment(\n  'commentFrag',\n  (state, commentId: string) => state.comments.find(comment => comment.id === commentId).content\n);\n\nconst result2 = connect(\n  'result2',\n  {},\n  () => ({ comments: commentFrag('5'), firstPost: firstPostsFrag() })\n);\n\nconsole.log(result2);\n\n// ======\n\nconst selectedCommentIdFrag = fragment('selectedCommentIdFrag', state => state.selectedCommentId);\n\nconst commentTrack = track('commentTrack', (state, commentId: string) =>\n  state.track.comments.find(comment => comment.id === commentId)\n);\n\nconst selectedCommentTrack = track(\n  'selectedCommentTrack',\n  state => state.track.selectedCommentId,\n  selectedId => commentTrack(selectedId.value)\n);\n\nconst result3 = connect(\n  'result3',\n  {},\n  () => ({ selectedComment: selectedCommentTrack() })\n);\n\nconsole.log(result3);\n\n// =====\n\nconst postCommentsTrack = track('postCommentsTrack', (state, post: Post) =>\n  post.comments.map(commentId => commentTrack(commentId))\n);\n\nconst postTrack = track('postTrack', (state, postId: string) => state.track.posts.find(post => post.id === postId));\n\nconst postWithCommentsTrack = track(\n  'postWithCommentsTrack',\n  (state, postId: string) => state.track.posts.find(post => post.id === postId),\n  post => {\n    return {\n      post: post.track,\n      comments: postCommentsTrack(post.value),\n    };\n  }\n);\n\nconst result4 = connect(\n  'result4',\n  {},\n  () => ({ ...postWithCommentsTrack('2') })\n);\n\nconsole.log(result4);\n\n/*\n\ntype CommentProps = {\n  comment: PostComment;\n};\n\nconst CommentComponent = (props: CommentProps) => {\n  const { comment } = connect(\n    'CommentComponent',\n    props\n  );\n};\n\n// Post\n\ntype PostProps = {\n  postId: string;\n};\n\nconst commentFrag = fragment('commentFrag', (state, commentId: string) =>\n  state.comments.find(comment => comment.id === commentId)\n);\n\nconst postCommentsFrag = fragment('postCommentsFrag', (state, post: Post) =>\n  post.comments.map(commentId => commentFrag(commentId))\n);\n\nconst postFrag = fragment('postFrag', (state, postId: string) => {\n  const post = state.posts.find(post => post.id === postId);\n  return {\n    post,\n    comments: postCommentsFrag(post),\n  };\n});\n\nconst PostComponent = (props: PostProps) => {\n  const { comments, post } = connect(\n    'PostComponent',\n    props,\n    postFrag,\n    props.postId\n  );\n  comments.forEach(comment => {\n    CommentComponent({ comment });\n  });\n};\n\n// Posts\ntype PostsProps = {};\n\nconst postsIdsFrag = fragment('postsIdsFrag', state => state.posts.map(post => post.id));\n\nconst postsFrag = fragment('postsFrag', () => ({\n  postsIds: postsIdsFrag(),\n}));\n\nconst PostsComponent = (props: PostsProps) => {\n  const { postsIds } = connect(\n    'PostsComponent',\n    props,\n    postsFrag\n  );\n\n  postsIds.map(postId => {\n    PostComponent({ postId });\n  });\n};\n\nconsole.log('hello');\n\n// render\nPostsComponent({});\n*/\n"]}